//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace VideoStore.Business.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(LikeMatching))]
    [KnownType(typeof(Media))]
    public partial class Recommendation: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public byte[] Revision
        {
            get { return _revision; }
            set
            {
                if (_revision != value)
                {
                    ChangeTracker.RecordOriginalValue("Revision", _revision);
                    _revision = value;
                    OnPropertyChanged("Revision");
                }
            }
        }
        private byte[] _revision;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<LikeMatching> LikeMatchings
        {
            get
            {
                if (_likeMatchings == null)
                {
                    _likeMatchings = new TrackableCollection<LikeMatching>();
                    _likeMatchings.CollectionChanged += FixupLikeMatchings;
                }
                return _likeMatchings;
            }
            set
            {
                if (!ReferenceEquals(_likeMatchings, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_likeMatchings != null)
                    {
                        _likeMatchings.CollectionChanged -= FixupLikeMatchings;
                    }
                    _likeMatchings = value;
                    if (_likeMatchings != null)
                    {
                        _likeMatchings.CollectionChanged += FixupLikeMatchings;
                    }
                    OnNavigationPropertyChanged("LikeMatchings");
                }
            }
        }
        private TrackableCollection<LikeMatching> _likeMatchings;
    
        [DataMember]
        public LikeMatching MostLikeMatching
        {
            get { return _mostLikeMatching; }
            set
            {
                if (!ReferenceEquals(_mostLikeMatching, value))
                {
                    var previousValue = _mostLikeMatching;
                    _mostLikeMatching = value;
                    FixupMostLikeMatching(previousValue);
                    OnNavigationPropertyChanged("MostLikeMatching");
                }
            }
        }
        private LikeMatching _mostLikeMatching;
    
        [DataMember]
        public Media Medium
        {
            get { return _medium; }
            set
            {
                if (!ReferenceEquals(_medium, value))
                {
                    var previousValue = _medium;
                    _medium = value;
                    FixupMedium(previousValue);
                    OnNavigationPropertyChanged("Medium");
                }
            }
        }
        private Media _medium;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            LikeMatchings.Clear();
            MostLikeMatching = null;
            FixupMostLikeMatchingKeys();
            Medium = null;
            FixupMediumKeys();
        }

        #endregion
        #region Association Fixup
    
        private void FixupMostLikeMatching(LikeMatching previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("MostLikeMatching")
                    && (ChangeTracker.OriginalValues["MostLikeMatching"] == MostLikeMatching))
                {
                    ChangeTracker.OriginalValues.Remove("MostLikeMatching");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("MostLikeMatching", previousValue);
                }
                if (MostLikeMatching != null && !MostLikeMatching.ChangeTracker.ChangeTrackingEnabled)
                {
                    MostLikeMatching.StartTracking();
                }
                FixupMostLikeMatchingKeys();
                if (previousValue != null)
                {
                    previousValue.FixupVideoStoreEntityModel_RecommendationLikeMatching1_RecommendationKeys(null, false);
                }
                if (MostLikeMatching != null)
                {
                    MostLikeMatching.FixupVideoStoreEntityModel_RecommendationLikeMatching1_RecommendationKeys(this, false);
                }
            }
        }
    
        private void FixupMostLikeMatchingKeys()
        {
            const string IdKeyName = "MostLikeMatching.Id";
    
            if(ChangeTracker.ExtendedProperties.ContainsKey(IdKeyName))
            {
                if(MostLikeMatching == null ||
                   !Equals(ChangeTracker.ExtendedProperties[IdKeyName], MostLikeMatching.Id))
                {
                    ChangeTracker.RecordOriginalValue(IdKeyName, ChangeTracker.ExtendedProperties[IdKeyName]);
                }
                ChangeTracker.ExtendedProperties.Remove(IdKeyName);
            }
        }
    
        private void FixupMedium(Media previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.Recommendation, this))
            {
                previousValue.Recommendation = null;
            }
    
            if (Medium != null)
            {
                Medium.Recommendation = this;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Medium")
                    && (ChangeTracker.OriginalValues["Medium"] == Medium))
                {
                    ChangeTracker.OriginalValues.Remove("Medium");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Medium", previousValue);
                }
                if (Medium != null && !Medium.ChangeTracker.ChangeTrackingEnabled)
                {
                    Medium.StartTracking();
                }
                FixupMediumKeys();
            }
        }
    
        private void FixupMediumKeys()
        {
            const string IdKeyName = "Medium.Id";
    
            if(ChangeTracker.ExtendedProperties.ContainsKey(IdKeyName))
            {
                if(Medium == null ||
                   !Equals(ChangeTracker.ExtendedProperties[IdKeyName], Medium.Id))
                {
                    ChangeTracker.RecordOriginalValue(IdKeyName, ChangeTracker.ExtendedProperties[IdKeyName]);
                }
                ChangeTracker.ExtendedProperties.Remove(IdKeyName);
            }
        }
    
        private void FixupLikeMatchings(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (LikeMatching item in e.NewItems)
                {
                    item.Recommendation = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("LikeMatchings", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (LikeMatching item in e.OldItems)
                {
                    if (ReferenceEquals(item.Recommendation, this))
                    {
                        item.Recommendation = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("LikeMatchings", item);
                    }
                }
            }
        }

        #endregion
    }
}
